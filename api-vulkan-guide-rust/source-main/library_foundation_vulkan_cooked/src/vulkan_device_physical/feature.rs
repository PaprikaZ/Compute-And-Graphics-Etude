use ::library_foundation_reintroduction::vulkan::VulkanBool32;
use ::library_foundation_reintroduction::vulkan::VulkanDevicePhysicalFeatureS;
use ::library_foundation_reintroduction::vulkan::VulkanDevicePhysicalFeatureSBuilder;


pub trait VulkanDevicePhysicalFeatureTableLookupEnable {
    fn lookup(&self, physical_device_feature_s: &VulkanDevicePhysicalFeatureS) -> VulkanBool32;
    fn enable(&self, builder: VulkanDevicePhysicalFeatureSBuilder) -> VulkanDevicePhysicalFeatureSBuilder;
}


#[derive(Debug, Clone, Copy)]
pub enum VulkanDevicePhysicalFeatureStandardName {
    RobustBufferAccess,
    FullDrawIndexUint32,
    ImageCubeArray,
    IndependentBlend,
    GeometryShader,
    TessellationShader,
    SampleRateShading,
    DualSrcBlend,
    LogicOp,
    MultiDrawIndirect,
    DrawIndirectFirstInstance,
    DepthClamp,
    DepthBiasClamp,
    FillModeNonSolid,
    DepthBounds,
    WideLines,
    LargePoints,
    AlphaToOne,
    MultiViewport,
    SamplerAnisotropy,
    TextureCompressionEtc2,
    TextureCompressionAstcLdr,
    TextureCompressionBc,
    OcclusionQueryPrecise,
    PipelineStatisticsQuery,
    VertexPipelineStoresAndAtomics,
    FragmentStoresAndAtomics,
    ShaderTessellationAndGeometryPointSize,
    ShaderImageGatherExtended,
    ShaderStorageImageExtendedFormats,
    ShaderStorageImageMultisample,
    ShaderStorageImageReadWithoutFormat,
    ShaderStorageImageWriteWithoutFormat,
    ShaderUniformBufferArrayDynamicIndexing,
    ShaderSampledImageArrayDynamicIndexing,
    ShaderStorageBufferArrayDynamicIndexing,
    ShaderStorageImageArrayDynamicIndexing,
    ShaderClipDistance,
    ShaderCullDistance,
    ShaderFloat64,
    ShaderInt64,
    ShaderInt16,
    ShaderResourceResidency,
    ShaderResourceMinLod,
    SparseBinding,
    SparseResidencyBuffer,
    SparseResidencyImage2d,
    SparseResidencyImage3d,
    SparseResidency2Samples,
    SparseResidency4Samples,
    SparseResidency8Samples,
    SparseResidency16Samples,
    SparseResidencyAliased,
    VariableMultisampleRate,
    InheritedQueries,
}

impl VulkanDevicePhysicalFeatureTableLookupEnable for VulkanDevicePhysicalFeatureStandardName {
    fn lookup(&self, physical_device_feature_s: &VulkanDevicePhysicalFeatureS) -> VulkanBool32 {
        let fs = physical_device_feature_s;
        match self {
            Self::RobustBufferAccess => fs.robust_buffer_access,
            Self::FullDrawIndexUint32 => fs.full_draw_index_uint32,
            Self::ImageCubeArray => fs.image_cube_array,
            Self::IndependentBlend => fs.independent_blend,
            Self::GeometryShader => fs.geometry_shader,
            Self::TessellationShader => fs.tessellation_shader,
            Self::SampleRateShading => fs.sample_rate_shading,
            Self::DualSrcBlend => fs.dual_src_blend,
            Self::LogicOp => fs.logic_op,
            Self::MultiDrawIndirect => fs.multi_draw_indirect,
            Self::DrawIndirectFirstInstance => fs.draw_indirect_first_instance,
            Self::DepthClamp => fs.depth_clamp,
            Self::DepthBiasClamp => fs.depth_bias_clamp,
            Self::FillModeNonSolid => fs.fill_mode_non_solid,
            Self::DepthBounds => fs.depth_bounds,
            Self::WideLines => fs.wide_lines,
            Self::LargePoints => fs.large_points,
            Self::AlphaToOne => fs.alpha_to_one,
            Self::MultiViewport => fs.multi_viewport,
            Self::SamplerAnisotropy => fs.sampler_anisotropy,
            Self::TextureCompressionEtc2 => fs.texture_compression_etc2,
            Self::TextureCompressionAstcLdr => fs.texture_compression_astc_ldr,
            Self::TextureCompressionBc => fs.texture_compression_bc,
            Self::OcclusionQueryPrecise => fs.occlusion_query_precise,
            Self::PipelineStatisticsQuery => fs.pipeline_statistics_query,
            Self::VertexPipelineStoresAndAtomics => fs.vertex_pipeline_stores_and_atomics,
            Self::FragmentStoresAndAtomics => fs.fragment_stores_and_atomics,
            Self::ShaderTessellationAndGeometryPointSize => fs.shader_tessellation_and_geometry_point_size,
            Self::ShaderImageGatherExtended => fs.shader_image_gather_extended,
            Self::ShaderStorageImageExtendedFormats => fs.shader_storage_image_extended_formats,
            Self::ShaderStorageImageMultisample => fs.shader_storage_image_multisample,
            Self::ShaderStorageImageReadWithoutFormat => fs.shader_storage_image_read_without_format,
            Self::ShaderStorageImageWriteWithoutFormat => fs.shader_storage_image_write_without_format,
            Self::ShaderUniformBufferArrayDynamicIndexing => fs.shader_uniform_buffer_array_dynamic_indexing,
            Self::ShaderSampledImageArrayDynamicIndexing => fs.shader_sampled_image_array_dynamic_indexing,
            Self::ShaderStorageBufferArrayDynamicIndexing => fs.shader_storage_buffer_array_dynamic_indexing,
            Self::ShaderStorageImageArrayDynamicIndexing => fs.shader_storage_image_array_dynamic_indexing,
            Self::ShaderClipDistance => fs.shader_clip_distance,
            Self::ShaderCullDistance => fs.shader_cull_distance,
            Self::ShaderFloat64 => fs.shader_float64,
            Self::ShaderInt64 => fs.shader_int64,
            Self::ShaderInt16 => fs.shader_int16,
            Self::ShaderResourceResidency => fs.shader_resource_residency,
            Self::ShaderResourceMinLod => fs.shader_resource_min_lod,
            Self::SparseBinding => fs.sparse_binding,
            Self::SparseResidencyBuffer => fs.sparse_residency_buffer,
            Self::SparseResidencyImage2d => fs.sparse_residency_image_2d,
            Self::SparseResidencyImage3d => fs.sparse_residency_image_3d,
            Self::SparseResidency2Samples => fs.sparse_residency2_samples,
            Self::SparseResidency4Samples => fs.sparse_residency4_samples,
            Self::SparseResidency8Samples => fs.sparse_residency8_samples,
            Self::SparseResidency16Samples => fs.sparse_residency16_samples,
            Self::SparseResidencyAliased => fs.sparse_residency_aliased,
            Self::VariableMultisampleRate => fs.variable_multisample_rate,
            Self::InheritedQueries => fs.inherited_queries,
        }
    }

    fn enable(&self, builder: VulkanDevicePhysicalFeatureSBuilder) -> VulkanDevicePhysicalFeatureSBuilder
    {
        let b = builder;
        match self {
            Self::RobustBufferAccess => b.robust_buffer_access(true),
            Self::FullDrawIndexUint32 => b.full_draw_index_uint32(true),
            Self::ImageCubeArray => b.image_cube_array(true),
            Self::IndependentBlend => b.independent_blend(true),
            Self::GeometryShader => b.geometry_shader(true),
            Self::TessellationShader => b.tessellation_shader(true),
            Self::SampleRateShading => b.sample_rate_shading(true),
            Self::DualSrcBlend => b.dual_src_blend(true),
            Self::LogicOp => b.logic_op(true),
            Self::MultiDrawIndirect => b.multi_draw_indirect(true),
            Self::DrawIndirectFirstInstance => b.draw_indirect_first_instance(true),
            Self::DepthClamp => b.depth_clamp(true),
            Self::DepthBiasClamp => b.depth_bias_clamp(true),
            Self::FillModeNonSolid => b.fill_mode_non_solid(true),
            Self::DepthBounds => b.depth_bounds(true),
            Self::WideLines => b.wide_lines(true),
            Self::LargePoints => b.large_points(true),
            Self::AlphaToOne => b.alpha_to_one(true),
            Self::MultiViewport => b.multi_viewport(true),
            Self::SamplerAnisotropy => b.sampler_anisotropy(true),
            Self::TextureCompressionEtc2 => b.texture_compression_etc2(true),
            Self::TextureCompressionAstcLdr => b.texture_compression_astc_ldr(true),
            Self::TextureCompressionBc => b.texture_compression_bc(true),
            Self::OcclusionQueryPrecise => b.occlusion_query_precise(true),
            Self::PipelineStatisticsQuery => b.pipeline_statistics_query(true),
            Self::VertexPipelineStoresAndAtomics => b.vertex_pipeline_stores_and_atomics(true),
            Self::FragmentStoresAndAtomics => b.fragment_stores_and_atomics(true),
            Self::ShaderTessellationAndGeometryPointSize => b.shader_tessellation_and_geometry_point_size(true),
            Self::ShaderImageGatherExtended => b.shader_image_gather_extended(true),
            Self::ShaderStorageImageExtendedFormats => b.shader_storage_image_extended_formats(true),
            Self::ShaderStorageImageMultisample => b.shader_storage_image_multisample(true),
            Self::ShaderStorageImageReadWithoutFormat => b.shader_storage_image_read_without_format(true),
            Self::ShaderStorageImageWriteWithoutFormat => b.shader_storage_image_write_without_format(true),
            Self::ShaderUniformBufferArrayDynamicIndexing => b.shader_uniform_buffer_array_dynamic_indexing(true),
            Self::ShaderSampledImageArrayDynamicIndexing => b.shader_sampled_image_array_dynamic_indexing(true),
            Self::ShaderStorageBufferArrayDynamicIndexing => b.shader_storage_buffer_array_dynamic_indexing(true),
            Self::ShaderStorageImageArrayDynamicIndexing => b.shader_storage_image_array_dynamic_indexing(true),
            Self::ShaderClipDistance => b.shader_clip_distance(true),
            Self::ShaderCullDistance => b.shader_cull_distance(true),
            Self::ShaderFloat64 => b.shader_float64(true),
            Self::ShaderInt64 => b.shader_int64(true),
            Self::ShaderInt16 => b.shader_int16(true),
            Self::ShaderResourceResidency => b.shader_resource_residency(true),
            Self::ShaderResourceMinLod => b.shader_resource_min_lod(true),
            Self::SparseBinding => b.sparse_binding(true),
            Self::SparseResidencyBuffer => b.sparse_residency_buffer(true),
            Self::SparseResidencyImage2d => b.sparse_residency_image_2d(true),
            Self::SparseResidencyImage3d => b.sparse_residency_image_3d(true),
            Self::SparseResidency2Samples => b.sparse_residency2_samples(true),
            Self::SparseResidency4Samples => b.sparse_residency4_samples(true),
            Self::SparseResidency8Samples => b.sparse_residency8_samples(true),
            Self::SparseResidency16Samples => b.sparse_residency16_samples(true),
            Self::SparseResidencyAliased => b.sparse_residency_aliased(true),
            Self::VariableMultisampleRate => b.variable_multisample_rate(true),
            Self::InheritedQueries => b.inherited_queries(true),
        }
    }
}